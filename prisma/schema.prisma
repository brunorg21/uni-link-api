// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  TEACHER
  STUDENT
}

enum ClassroomType {
  LAB
  CLASSROOM
}

model User {
  id            String      @id() @default(uuid())
  name          String
  email         String      @unique()
  password_hash String
  role          Role        @default(STUDENT)
  subjects      Subject[]
  createdAt     DateTime    @default(now())
  alocations    Alocation[]
  Course        Course?     @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId      String?

  @@map("users")
}

model Course {
  id       String    @id @default(uuid())
  name     String
  subjects Subject[]
  User     User[]
}

model Subject {
  id       String    @id @default(uuid())
  name     String
  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  semester Int?
  course   Course?   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  classes  Classes[]
  courseId String?
  userId   String

  @@map("subjects")
}

model Classes {
  id              String        @id @default(uuid())
  subject         Subject       @relation(fields: [subjectId], references: [id], onDelete: Cascade)
  subjectId       String
  classSchedule   ClassSchedule @relation(fields: [classScheduleId], references: [id])
  classScheduleId String
  classroom       Classroom     @relation(fields: [classroomId], references: [id])
  classroomId     String
  classDate       DateTime
  reserved        Boolean       @default(false)
  alocations      Alocation[]

  @@map("classes")
}

model ClassSchedule {
  id        String    @id @default(uuid())
  startHour String
  endHour   String
  classes   Classes[]

  @@map("classSchedules")
}

model Classroom {
  id         String        @id @default(uuid())
  name       String
  type       ClassroomType @default(CLASSROOM)
  capacity   Int
  computers  Int?
  alocations Alocation[]
  classes    Classes[]

  @@map("classrooms")
}

model Alocation {
  id          String    @id @default(uuid())
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  classroom   Classroom @relation(fields: [classroomId], references: [id])
  classroomId String
  class       Classes   @relation(fields: [classesId], references: [id], onDelete: Cascade)
  classesId   String
  createdAt   DateTime  @default(now())
  date        DateTime

  @@map("alocations")
}
